{"version":3,"file":"static/js/890.b4aa05d9.chunk.js","mappings":"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","sources":["Component/MainApp/Common/Tasks/Tasks.js"],"sourcesContent":["import Chip from \"@mui/material/Chip\";\nimport IconButton from \"@mui/material/IconButton\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges'\nimport EditIcon from '@mui/icons-material/Edit'\nimport DeleteOutlineRoundedIcon from '@mui/icons-material/DeleteOutlineRounded';\nimport { Box, Grid, Modal, Switch, Typography } from \"@mui/material\";\nimport moment from \"moment\";\nimport * as React from \"react\";\nimport axios from \"axios\";\nimport './Tasks.css'\nconst AddOrEditTask = React.lazy(() => import(\"../AddOrEditTask/AddOrEditTask\"));\n\nexport default function Tasks(props){\n  const [userInfo] = React.useState(props.userInfo?props.userInfo:null)\n  const [taskCategory, setTaskCategory] = React.useState('allTask')\n  const [dataToggler,setDataToggler] = React.useState(true);\n  const [isPersonal, setIsPersonal] = React.useState(false);\n  const [taskList, setTaskList] = React.useState([]);\n  const [openTaskModal, setOpenTaskModal] = React.useState(false);\n  const [project] = React.useState(props.project?props.project:null);\n    const [isEditTaskPage,setIsEditTaskPage] = React.useState(false)\n    const [editTaskPageInfo,setEditTaskPageInfo] = React.useState('')\n    const handleClose = () => setOpenTaskModal(false); \n    const handleOpen = (isEdit,editTaskId) => {\n      setEditTaskPageInfo(editTaskId?editTaskId:'');\n      setIsEditTaskPage(isEdit)\n      setOpenTaskModal(true);\n    }\n    const fetchTaskList =(taskListType)=>{\n      setTaskCategory(taskListType)\n    }\n    const togglePersonalTask = (ev) =>{\n      ev.preventDefault();\n      ev.stopPropagation();\n      if(!isPersonal)\n        setTaskCategory('isPersonal')\n      else if(isPersonal) \n        setTaskCategory('allTask')\n      setIsPersonal(!isPersonal)\n    }\n    React.useEffect(()=>{\n      props.setDataToHome(handleOpen)\n    },[])\n    React.useEffect(()=>{\n      let url=\"\";\n      if(taskCategory==='allTask'){\n        if(project) url = '/task/getAllTask/'+ project.id\n        else url = '/task/getAllTask/null';\n        axios.get(url).then((response)=>{\n          setTaskList(response.data)\n        })\n      } else if(taskCategory){\n        if(project) url = '/task/getTaskListByCategory/'+taskCategory+'/'+ project.id\n        else url = '/task/getTaskListByCategory/'+taskCategory+'/null';\n        axios.get(url).then((response)=>{\n          setTaskList(response.data)\n        })\n      }\n    },[taskCategory,dataToggler])\n    const nextTrasition=(taskId)=>{\n      if(window.confirm('Do you really want to change trasition of this task?'))\n      axios.put('/task/nextTrasition/'+taskId).then(()=>{\n        setDataToggler(!dataToggler)\n      })\n    }\n    const deleteTask=(taskId)=>{\n      if(window.confirm('Do you really want to delete this task?'))\n      axios.delete('/task/deleteTask/'+taskId).then(()=>{\n        setDataToggler(!dataToggler)\n      })\n    }\n    return(\n        <Grid className=\"todoList\" item xs={12}>\n            <Grid className=\"taskCategory\" item container xs={12}>\n                <Grid className={taskCategory===\"allTask\" || taskCategory===\"isPersonal\"?\"activeTaskList\":\"\"} onClick={()=>fetchTaskList(isPersonal?'isPersonal':'allTask')} item xs={2}>\n                    { project?<h2>All task</h2>:<h2>{isPersonal?'Personal':'All task'} <Switch checked={!isPersonal} onClick={togglePersonalTask} size=\"small\" /></h2>}\n                </Grid>\n                <Grid className={taskCategory===\"todo\"?\"activeTaskList\":\"\"} onClick={()=>fetchTaskList('todo')} item xs={2}>\n                    <h2>ToDo</h2>\n                </Grid>\n                <Grid className={taskCategory===\"inprogress\"?\"activeTaskList\":\"\"} onClick={()=>fetchTaskList('inprogress')} item xs={2}>\n                    <h2>In Progress</h2>\n                </Grid>\n                <Grid className={taskCategory===\"review\"?\"activeTaskList\":\"\"} onClick={()=>fetchTaskList('review')} item xs={2}>\n                    <h2>Review</h2>\n                </Grid>\n                <Grid className={taskCategory===\"completed\"?\"activeTaskList\":\"\"} onClick={()=>fetchTaskList('completed')} item xs={2}>\n                    <h2>Completed</h2>\n                </Grid>\n                <Grid className={taskCategory===\"pending\"?\"activeTaskList\":\"\"} onClick={()=>fetchTaskList('pending')} item xs={2}>\n                    <h2>Pending</h2>\n                </Grid>\n            </Grid>\n            <Grid className=\"header-row\" container spacing={2}>\n              <Grid className=\"list-header\" item xs={2}>Task Name</Grid>\n              <Grid className=\"list-header\" item xs={3}>Project/Personal</Grid>\n              {/* <Grid className=\"list-header\" item xs={1}></Grid> */}\n              <Grid className=\"list-header\" item xs={2}>Start Date</Grid>\n              <Grid className=\"list-header\" item xs={2}>End Date</Grid>\n              <Grid className=\"list-header task-status-header\" item xs={3}>Status</Grid>\n            </Grid>\n            <Grid className=\"taskList\" item xs={12}>\n                { taskList.length?\n                  taskList.map((task)=>(\n                    <ListItem key={task._id}\n                      secondaryAction={\n                        <div>\n                        <Tooltip title=\"Next Trasition\" placement=\"top\">\n                          <span>\n                            <IconButton sx={{mr:'-5px'}} edge=\"end\" onClick={()=>nextTrasition(task._id)} disabled={task.trasition==='completed'} label='changeTrasition' aria-label=\"Trasition\">\n                              <PublishedWithChangesIcon/>\n                            </IconButton>\n                          </span>\n                        </Tooltip>\n                        <Tooltip title=\"Delete Task\" placement=\"top\">\n                          <span>\n                            <IconButton sx={{mr:1}} edge=\"end\" onClick={()=>deleteTask(task._id)} \n                            disabled={!(task.isPersonal || userInfo && (userInfo.role==='admin' || userInfo.role==='manager'))} \n                            label='changeTrasition' aria-label=\"Trasition\">\n                              <DeleteOutlineRoundedIcon/>\n                            </IconButton>\n                          </span>\n                        </Tooltip>\n                        </div>\n                      }\n                    >\n                      <Tooltip title=\"Edit Task\" placement=\"top\">\n                        <ListItemButton className=\"itemButton\" onClick={()=>handleOpen(true, task._id)} sx={{pl:1,mr:\"0\"}}>\n                          <ListItemIcon sx={{minWidth:\"40px\"}}>\n                            <EditIcon/>\n                          </ListItemIcon>\n                          <ListItemText> \n                            <Grid container spacing={1}>\n                              <Grid item xs={2}>\n                                <Typography sx={{mt:'5px'}} variant=\"inherit\" noWrap>\n                                  {task.title}\n                                </Typography>\n                              </Grid>\n                              <Grid sx={{textAlign:\"center\"}} item xs={3}>\n                                {\n                                task.project?\n                                <Typography sx={{mt:'5px'}} variant=\"inherit\" noWrap>  \n                                  {task.project.title}\n                                </Typography>\n                                :<Typography sx={{mt:'5px'}} variant=\"inherit\">  \n                                  <b>Own task</b>\n                                </Typography>\n                                }\n                              </Grid>\n                              <Grid className=\"taskDate\" sx={{mt:'5px'}} item xs={2}>{moment(task.startDate).format('MMM-DD-YYYY')}</Grid>\n                              <Grid className=\"taskDate\" sx={{mt:'5px'}} item xs={2}>{moment(task.endDate).format('MMM-DD-YYYY')}</Grid>\n                              <Grid sx={{textAlign:'right'}} item xs={3}>\n                                {\n                                  moment(task.endDate).isBefore(moment(),'date')?\n                                    <ListItemText className=\"taskState\">\n                                      <Chip\n                                      sx={{textTransform: \"uppercase\"}}\n                                      className=\"pending\"\n                                      label='Pending'\n                                      size=\"small\"/>\n                                    </ListItemText>\n                                    :''\n                                }\n                                <ListItemText className=\"taskState\">\n                                  <Chip\n                                    sx={{textTransform: \"uppercase\"}}\n                                    className={task.trasition}\n                                    label={task.trasition}\n                                    size=\"small\"/>\n                                </ListItemText>  \n                              </Grid>\n                            </Grid> \n                          </ListItemText>\n                          {/* <ListItemText secondary={\"test\"}/> */}                                                                              \n                        </ListItemButton>\n                      </Tooltip>\n                    </ListItem>\n                  )):<Grid className=\"noFound\" item xs={12}>There is no task for now, please create new task.</Grid>\n                }\n              </Grid>\n              <Modal\n                open={openTaskModal}\n                onClose={handleClose}\n                >\n                <Box>\n                  <AddOrEditTask isEditTask={isEditTaskPage} \n                    editTaskPageInfo={editTaskPageInfo} \n                    reRenderTask={setTaskCategory} \n                    handleClose={handleClose}\n                    project={project}\n                    {...props}/>\n                </Box>\n              </Modal>\n            </Grid>\n    )\n}"],"names":["AddOrEditTask","React","Tasks","props","userInfo","taskCategory","setTaskCategory","dataToggler","setDataToggler","isPersonal","setIsPersonal","taskList","setTaskList","openTaskModal","setOpenTaskModal","project","isEditTaskPage","setIsEditTaskPage","editTaskPageInfo","setEditTaskPageInfo","handleClose","handleOpen","isEdit","editTaskId","fetchTaskList","taskListType","setDataToHome","url","id","axios","then","response","data","className","item","xs","container","onClick","checked","ev","preventDefault","stopPropagation","size","spacing","length","map","task","secondaryAction","title","placement","sx","mr","edge","taskId","_id","window","confirm","disabled","trasition","label","role","pl","minWidth","mt","variant","noWrap","textAlign","moment","startDate","format","endDate","isBefore","textTransform","open","onClose","isEditTask","reRenderTask"],"sourceRoot":""}