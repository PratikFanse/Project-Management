{"version":3,"file":"static/js/817.7d8969ec.chunk.js","mappings":"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","sources":["Component/MainApp/Common/AddOrEditTask/AddOrEditTask.js"],"sourcesContent":["import LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport { Box, Button, Checkbox, Chip, FormControl, FormControlLabel, Grid, InputLabel, MenuItem, Select, Stack, Step, StepButton, StepLabel, Stepper, Typography } from \"@mui/material\";\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport DateRangePicker from '@mui/lab/DateRangePicker';\nimport DateAdapter from '@mui/lab/AdapterMoment';\nimport validator from \"validator\";\nimport axios from \"axios\";\nimport moment, { isMoment } from \"moment\";\nimport AssignmentIcon from '@mui/icons-material/Assignment';\nimport ModelTrainingIcon from '@mui/icons-material/ModelTraining';\nimport ManageSearchIcon from '@mui/icons-material/ManageSearch';\nimport CheckCircleOutlineRoundedIcon from '@mui/icons-material/CheckCircleOutlineRounded';\nimport './AddOrEditTask.css'\n\nconst steps = [\n 'todo','inprogress','review','completed'\n];\n\n\nexport default function AddOrEditTask(props){\n  const [userInfo] = React.useState(props.userInfo);\n  const [projectList, setProjectList] = React.useState([]);  \n  const [memebrList, setMemberList] = React.useState([]);\n  const [isEditTask] = React.useState(props.isEditTask?true:false)\n  const [isValidStartDate,setIsValidStartDate] = React.useState(true)\n  const [project] = React.useState(props.project?props.project:null)\n  const [task, setTask] = React.useState({\n    title:'',\n    isPersonal:project?false:!isEditTask,\n    project:project?project.id:'',\n    owner:'',\n    startDate:null,\n    endDate:null\n    });\n  const [validations,setValidations] = React.useState({\n    title:false,\n    dateRange:false,\n    project:project?true:false,\n    owner:false,\n    isAttempted:false,\n  });\n  React.useEffect(()=>{\n    if(isEditTask && props.editTaskPageInfo){\n      axios.get('/task/getTaskById/'+props.editTaskPageInfo).then((response)=>{\n        if(response.data.projectList){\n          setProjectList(response.data.projectList)\n          setMemberList(response.data.memberList)\n        }\n        setTask(response.data)\n        setIsValidStartDate(response.data.startDate?false:true)\n        setValidations({\n          title:true,\n          dateRange:true,\n          project:response.data.project?true:false,\n          owner:response.data.project?true:false,\n          isAttempted:false,\n        })\n      })\n    }\n  },[isEditTask, props.editTaskPageInfo])\n  React.useEffect(()=>{\n    if(!task.isPersonal && !task.projectList){\n      axios.get('/project/getProjectList').then((res)=>{\n        setProjectList(res.data)\n      })\n    } else {\n      if(task.projectList)\n        setTask({...task,projectList:''})\n      else{\n        setTask({...task,project:'none',owner:'none'})\n        setMemberList([])\n      }\n    }\n  },[task.isPersonal])\n  React.useEffect(()=>{\n    if(task.project && task.project!=='none' && !task.memberList){\n      axios.get('/project/getProjectMembers/'+task.project).then((res)=>{\n        setTask({...task,owner:'none'})\n        setMemberList(res.data)\n      })\n    } else {\n      if(task.memberList)\n        setTask({...task,memberList:''})\n      else{\n        setTask({...task,owner:'none'})\n        setMemberList([])\n      }\n    }\n  },[task.project])\n  const updateValue = (ev) =>{\n    if(ev.target.name!=='isPersonal'){\n      setTask({...task, [ev.target.name]: ev.target.value})\n    } else{\n      setTask({...task, [ev.target.name]: ev.target.checked})\n    }\n    validateForm(ev)\n  }\n  const validateForm=(ev,dateRange)=>{\n    if(dateRange){\n      if(isMoment(dateRange[0]) && isMoment(dateRange[1]) &&\n        dateRange[0].isSameOrBefore(dateRange[1],'date')){\n          if(isValidStartDate && dateRange[0].isSameOrAfter(new Date(),'date'))\n            setValidations({...validations,dateRange:true})\n          else\n            setValidations({...validations,dateRange:false})\n        } else {\n          setValidations({...validations,dateRange:false})  \n        }\n    } else{\n      if(ev.target.name === 'title'){\n        setValidations({...validations, title:validator.isLength(ev.target.value,{min:3})})\n      } else if(ev.target.name === 'project' || ev.target.name === 'owner'){\n        setValidations({...validations, \n          [ev.target.name]: (!task.isPersonal && ev.target.value!=='none')||task.isPersonal})\n      }\n    }\n  }\n\n  const addTask=(ev)=>{\n    ev.preventDefault();\n    if(validations.title && validations.dateRange && \n      (task.isPersonal||(!task.isPersonal && task.project!=='none' && task.owner!=='none'))){\n        let newTask = {...task}\n        if(newTask.project===\"none\"||!newTask.project){\n          delete newTask['project']\n          delete newTask['owner']\n        }\n        axios.post('/task/addNewTask',newTask).then((res)=>{\n          props.reRenderTask('')\n          props.reRenderTask('allTask')\n          props.handleClose()\n        })\n      } else {\n        setValidations({...validations, isAttempted:true})\n      }\n  }\n  const updateTask=(ev)=>{\n    ev.preventDefault();\n    if(validations.title && validations.dateRange && \n      (task.isPersonal||(!task.isPersonal && task.project!=='none' && task.owner!=='none'))){\n        let newTask = {...task}\n        if(newTask.project===\"none\"||!newTask.project){\n          delete newTask['project']\n          delete newTask['owner']\n        }\n        axios.post('/task/updateTask',newTask).then((res)=>{\n          props.reRenderTask('')\n          props.reRenderTask('allTask')\n          props.handleClose()\n        })\n      } else {\n        setValidations({...validations, isAttempted:true})\n      }\n  }\n  const changeTrasition=(trasition)=>{\n    axios.put('/task/changeTrasition',{trasition:trasition,taskId:task._id}).then(()=>{\n      props.reRenderTask('')\n      props.reRenderTask('allTask')\n      props.handleClose()\n      }\n    )\n  }\n  return(\n      <Box component=\"form\" autoComplete=\"off\" onSubmit={isEditTask?updateTask:addTask} sx={style}>\n        <Typography sx={{mb:1}} id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n          {isEditTask?'Edit':'Add'} Task\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n              <TextField sx={{width:'100%', mb:2}}\n              id=\"filled-textarea\"\n              value={task.title}\n              name=\"title\"\n              label=\"Task Name\"\n              placeholder=\"Placeholder\"\n              variant=\"standard\"\n              size=\"small\"\n              required\n              error={!validations.title && validations.isAttempted}\n              helperText=\"Must have min 3 character.\"\n              onChange={updateValue}\n              />\n          </Grid>\n          <LocalizationProvider dateAdapter={DateAdapter}>\n            <DateRangePicker\n              disablePast={isValidStartDate}\n              value={[task.startDate,task.endDate]}\n              // minDate={new Date()}\n              onChange={(newValue) => {\n                if(!moment(newValue[0]).isSame(task.startDate,'date'))\n                  setIsValidStartDate(true)\n                newValue[1]\n                  ?setTask({...task, startDate:newValue[0]._d, endDate:newValue[1]._d})\n                  :setTask({...task, startDate:newValue[0]._d})\n                validateForm('',newValue)\n              }}\n              renderInput={(startProps, endProps) => (\n                <React.Fragment>\n                  <TextField sx={{ml:2}}  required variant=\"standard\" {...startProps} />\n                  <Box sx={{ mx: 2 }}> to </Box>\n                  <TextField variant=\"standard\" required {...endProps} />\n                </React.Fragment>\n              )}\n            />\n          </LocalizationProvider>\n          {\n            isEditTask || project?''\n            :<Grid item sx={{mb:1}} xs={12}>\n              <FormControlLabel \n                name=\"isPersonal\"\n                control={\n                  <Checkbox checked={task.isPersonal}\n                    onClick={updateValue}\n                />} \n                label=\"Is this Personal task\" \n              />\n            </Grid>\n          }\n          {\n            !task.isPersonal?\n            <Grid container spacing={2} sx={isEditTask||project?{ml:0,mt:1.5}:{ml:0}}>\n              <Grid item xs={12}>\n                <FormControl variant=\"standard\" sx={{ minWidth: '100%', mb:2 }}>\n                  <InputLabel id=\"select-project-label\"\n                  error={!validations.project && !task.isPersonal && validations.isAttempted}>\n                    Project\n                  </InputLabel>\n                  <Select\n                    labelId=\"select-project-label\"\n                    name=\"project\"\n                    id=\"demo-simple-select-standard\"\n                    value={task.project?task.project:'none'}\n                    onChange={updateValue}\n                    disabled={isEditTask || project?true:false}\n                    label=\"Project\"\n                    error={!validations.project && !task.isPersonal && validations.isAttempted}\n                  >\n                    <MenuItem value=\"none\">None</MenuItem>\n                    { project?\n                      <MenuItem key={project.id} value={project.id}>{project.title}</MenuItem>:  \n                      projectList.map((project)=>\n                        <MenuItem key={project._id} value={project._id}>{project.title}</MenuItem>  \n                      )\n                    }\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl variant=\"standard\" sx={{ minWidth: '100%', mb:2 }}>\n                  <InputLabel id=\"select-owner-label\" \n                  error={!validations.owner && !task.isPersonal && validations.isAttempted}>\n                    Owner\n                  </InputLabel>\n                  <Select\n                    labelId=\"select-owner-label\"\n                    name=\"owner\"\n                    id=\"memberList\"\n                    value={task.owner?task.owner:'none'}\n                    onChange={updateValue}\n                    label=\"Owner\"\n                    error={!validations.owner && !task.isPersonal && validations.isAttempted}\n                  >\n                    <MenuItem value=\"none\">None</MenuItem>\n                    {\n                      memebrList.map((member)=>\n                        <MenuItem className=\"member-li\" key={member._id} value={member._id}>\n                          <Grid container spacing={2}>\n                            <Grid item xs={6}>{member.username}</Grid>\n                            <Grid item sx={{textAlign:'right'}} xs={6}>\n                              <Chip\n                                  sx={{textTransform: \"uppercase\"}}\n                                  label={member.role}\n                                  size=\"small\"/>\n                            </Grid>\n                          </Grid>\n                          </MenuItem>  \n                      )\n                    }\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            :''\n          }\n          <Grid item xs={12}>\n            <TextField sx={{width:'100%'}}\n            name=\"description\"\n            value={task.description?task.description:''}\n            id=\"filled-textarea\"\n            label=\"Description\"\n            placeholder=\"Description\"\n            multiline\n            variant=\"filled\"\n            rows={2}\n            onChange={updateValue}\n            />\n          </Grid>\n          {\n            isEditTask && (userInfo.role!=='employee' || (userInfo.role==='employee' && task.isPersonal))\n              ?<Box sx={{ width: '100%', my: 4 }}>\n                <Stepper nonLinear activeStep={steps.indexOf(task.trasition)} alternativeLabel >\n                    <Step key='TODO' active={steps.indexOf(task.trasition)===0} >\n                      <StepButton color=\"inherit\" onClick={()=>changeTrasition('todo')}>\n                        <StepLabel className={steps.indexOf(task.trasition)===0?'activeStep':''} StepIconComponent={()=><AssignmentIcon/>}>TODO</StepLabel>\n                      </StepButton>\n                    </Step>\n                    <Step key='INPROGRESS' active={steps.indexOf(task.trasition)===1}>\n                      <StepButton color=\"inherit\" onClick={()=>changeTrasition('inprogress')}>\n                        <StepLabel className={steps.indexOf(task.trasition)===1?'activeStep':''} StepIconComponent={()=><ModelTrainingIcon/>}>INPROGRESS</StepLabel>\n                      </StepButton>\n                    </Step>\n                    <Step key='RREVIEW' active={steps.indexOf(task.trasition)===2}>\n                      <StepButton color=\"inherit\" onClick={()=>changeTrasition('review')}>\n                        <StepLabel className={steps.indexOf(task.trasition)===2?'activeStep':''} StepIconComponent={()=><ManageSearchIcon/>}>REVIEW</StepLabel>\n                      </StepButton>\n                    </Step>\n                    <Step key='COMPLETED' active={steps.indexOf(task.trasition)===3}>\n                      <StepButton disabled={false} color=\"inherit\" onClick={()=>changeTrasition('completed')}>\n                        <StepLabel className={steps.indexOf(task.trasition)===3?'activeStep':''} StepIconComponent={()=><CheckCircleOutlineRoundedIcon/>}>COMPLETED</StepLabel>\n                      </StepButton>\n                    </Step>\n                </Stepper>\n              </Box>\n              :\"\"\n          }\n          <Grid item xs={12}>\n            <Stack direction=\"row\" spacing={2}>\n              <Button type='submit' variant=\"contained\">{isEditTask?'Update':'Add'}</Button>\n              <Button variant=\"outlined\" onClick={props.handleClose}>Cancel</Button>\n            </Stack>\n          </Grid>\n        </Grid>\n      </Box>\n  )\n}\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'white',\n  borderRadius: '10px',\n  boxShadow: '3px 3px 10px #434242bd',\n  p: 4,\n};"],"names":["steps","AddOrEditTask","props","React","userInfo","projectList","setProjectList","memebrList","setMemberList","isEditTask","isValidStartDate","setIsValidStartDate","project","title","isPersonal","id","owner","startDate","endDate","task","setTask","dateRange","isAttempted","validations","setValidations","editTaskPageInfo","axios","then","response","data","memberList","res","updateValue","ev","target","name","value","checked","validateForm","isMoment","isSameOrBefore","isSameOrAfter","Date","validator","min","changeTrasition","trasition","taskId","_id","reRenderTask","handleClose","Box","component","autoComplete","onSubmit","preventDefault","newTask","sx","style","Typography","mb","variant","Grid","container","spacing","item","xs","TextField","width","label","placeholder","size","required","error","helperText","onChange","LocalizationProvider","dateAdapter","DateAdapter","DateRangePicker","disablePast","newValue","moment","isSame","_d","renderInput","startProps","endProps","ml","mx","FormControlLabel","control","Checkbox","onClick","mt","FormControl","minWidth","InputLabel","Select","labelId","disabled","MenuItem","map","member","className","username","textAlign","Chip","textTransform","role","description","multiline","rows","my","Stepper","nonLinear","activeStep","indexOf","alternativeLabel","Step","active","StepButton","color","StepLabel","StepIconComponent","Assignment","ModelTraining","ManageSearch","CheckCircleOutlineRounded","Stack","direction","Button","type","position","top","left","transform","bgcolor","borderRadius","boxShadow","p"],"sourceRoot":""}