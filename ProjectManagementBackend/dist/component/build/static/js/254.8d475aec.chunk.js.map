{"version":3,"file":"static/js/254.8d475aec.chunk.js","mappings":"6dAce,SAASA,EAAOC,GAC3B,MAAoC,IAAIC,EAAAA,SAAe,CACnDC,YAAW,EACXC,OAAM,EACNC,SAAQ,EACRC,kBAAiB,EACjBC,aAAY,EACZC,oBAAoB,EACpBC,cAAa,IAPjB,eAAOC,EAAP,KAAmBC,EAAnB,KASA,EAAoC,IAAIT,EAAAA,SAAe,CACnDU,SAAS,6BACTC,MAAM,oBACNC,SAAS,gDACTC,SAAS,mCAJb,eAAOC,EAAP,KAAmBC,EAAnB,KAMA,EAAuC,IAAIf,EAAAA,SAAe,MAA1D,eAAOgB,EAAP,KAAoBC,EAApB,KACA,EAAsB,IAAIjB,EAAAA,SAAekB,GAAAA,EAAO,IAAIC,MAAOC,aAAY,IAAID,MAAOE,cAAc,MAAhG,eAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwB,IAAIvB,EAAAA,SAAe,MAA3C,eAAOwB,EAAP,KAAaC,EAAb,KACA,EAAgC,IAAIzB,EAAAA,SAAe,MAAnD,eAAOa,EAAP,KAAiBa,EAAjB,KACA,EAAwC,IAAI1B,EAAAA,UAAe,GAA3D,gBAAO2B,GAAP,MAAqBC,GAArB,MACMC,GAAa,SAACC,GAChB,IAAMC,GAAW,UAAOvB,GACxB,OAAQsB,EAAGE,OAAOC,MACd,IAAK,WAAYF,EAAW,WAAiBG,IAAAA,SAAmBJ,EAAGE,OAAOG,MAAM,CAACC,IAAI,IACjF,MACJ,IAAK,MAAOL,EAAW,QAAYD,EAAGE,OAAOG,MACzC,MACJ,IAAK,QAASJ,EAAW,QAAcG,IAAAA,QAAkBJ,EAAGE,OAAOG,OAC/D,MACJ,IAAK,WACGJ,EAAW,iBAAuBG,IAAAA,iBAA2BJ,EAAGE,OAAOG,OACvEJ,EAAW,mBAAyBA,EAAY3B,kBAAoBS,IAAWiB,EAAGE,OAAOG,MACzFV,EAAQK,EAAGE,OAAOG,OAEtB,MACJ,IAAK,cACGJ,EAAW,mBAAyBA,EAAY3B,kBAAoB0B,EAAGE,OAAOG,QAAQX,EACtFE,EAAYI,EAAGE,OAAOG,OAMlC1B,GAAc,UAAIsB,KA+BtB,OACQ,SAACM,EAAA,EAAD,CAAMC,UAAU,YAAYC,GAAI,CAAE,uBAAwB,CAACC,MAAO,OAAQC,GAAG,EAAGC,GAAG,IAAKC,SAAU,MAAlG,UACI,UAACC,EAAA,EAAD,CAAKC,UAAU,OAAOC,aAAa,MAAMC,SA/BvC,SAACC,GACXA,EAAMC,iBACN,IAAMC,EAAOF,EAAMhB,OACnB,GAAGxB,EAAWP,YAAcO,EAAWL,SAAWK,EAAWJ,kBACtDI,EAAWF,oBAAsBgB,EAAI,CACxC,IAAM6B,EAAU,CACZzC,SAAUwC,EAAKxC,SAASyB,MACxBb,IAAIJ,GAAAA,CAAOI,GACXX,MAAOuC,EAAKvC,MAAMwB,MAClBvB,SAAUsC,EAAKtC,SAASuB,OAE5BiB,IAAAA,KAAW,eAAeD,GACrBE,MAAK,SAAAC,GACCA,EAASC,KAAKC,UACbxC,EAAayC,SAEb1C,GAAc,kBAAID,GAAL,IAAgBH,MAAM2C,EAASC,KAAKG,OACjDjD,GAAc,kBAAID,GAAL,IAAgBD,cAAa,EAAKF,aAAY,aAGrE,CACF,IAAM0B,GAAW,UAAOvB,GACxBuB,EAAY1B,aAAc,EAC1BI,EAAcsB,KAQV,WACI,UAAC4B,EAAA,EAAD,YAEI,SAACC,EAAA,EAAD,CAAYrB,GAAI,CAACE,GAAG,EAAGC,GAAG,GAAImB,cAAY,EAACC,QAAQ,KAAKjB,UAAU,MAAlE,iCACA,UAACkB,EAAA,GAAD,CAAMC,WAAS,EAACzB,GAAI,CAAE,uBAAwB,CAAEI,SAAU,MAA1D,WACA,SAACoB,EAAA,GAAD,CAAME,MAAI,EAACC,GAAI,EAAf,UACI,SAACC,EAAA,EAAD,CACIC,GAAG,WACHnC,KAAK,WACLoC,KAAK,QACLC,MAAM,YACNR,QAAQ,WACRhD,WAAYA,EAAWJ,SACvB6D,MAAO/D,EAAWH,cAAgBG,EAAWP,WAC7CuE,SAAU3C,GAAc4C,UAAQ,OAExC,SAACV,EAAA,GAAD,CAAME,MAAI,EAACC,GAAI,EAAf,UACI,SAACQ,EAAA,EAAD,CAAsBC,YAAaC,EAAAA,EAAnC,UACI,SAACC,EAAA,EAAD,CACIT,GAAG,MACHnC,KAAK,MACLqC,MAAM,gBACNnC,MAAOb,EACPwD,QAAS5D,GAAAA,EAAO,IAAIC,MAAOC,aAAY,IAAID,MAAOE,cAAc,KAChEmD,SAAW,SAACrC,GAASZ,EAAOY,IAC5B4C,YAAa,SAACC,GAAD,OACT,SAACb,EAAA,GAAD,QAAWE,KAAK,QAAQP,QAAQ,YAAekB,KAC/CP,UAAQ,YAIxB,0BACI,SAACN,EAAA,EAAD,CACIC,GAAG,QACHnC,KAAK,QACLoC,KAAK,QACLC,MAAM,QACNR,QAAQ,WACRhD,WAAaA,EAAWH,MACxB4D,MAAO/D,EAAWH,eAAiBG,EAAWL,SAAWK,EAAWD,cACpEiE,SAAU3C,GAAc4C,UAAQ,OAExC,UAACQ,EAAA,EAAD,CAAa1C,GAAI,CAACE,GAAG,EAAEC,GAAG,IAAKC,SAAU,KAAMmB,QAAQ,WAAvD,WACI,SAACoB,EAAA,EAAD,CAAYC,QAAQ,WAChBZ,MAAQ/D,EAAWH,cAAgBG,EAAWJ,iBADlD,uBAEA,SAACgF,EAAA,EAAD,CACIC,KAAM1D,GAAe,OAAO,WAC5ByC,GAAG,WACHnC,KAAK,WACLqC,MAAM,WACNR,QAAQ,WACRS,MAAQ/D,EAAWH,cAAgBG,EAAWJ,iBAC9CkF,cACI,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACE,SAACC,EAAA,EAAD,CACE,aAAW,6BACXC,QAAS,kBAAI9D,IAAiBD,KAC9BgE,YA9DL,SAAC7D,GAC5BA,EAAGmB,kBA0D2B,SAKGtB,IAAe,SAACiE,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,QAI5CrB,SAAU3C,GACV4C,UAAQ,KACR,SAACqB,EAAA,EAAD,CACAvB,MAAQ/D,EAAWH,cAAgBG,EAAWJ,iBAD9C,SACiEU,EAAWF,eAEpF,0BACI,SAACuD,EAAA,EAAD,CACIkB,KAAK,WACLjB,GAAG,cACHnC,KAAK,cACLqC,MAAM,mBACND,KAAK,QACLP,QAAQ,WACRhD,WAAYN,EAAWH,cAAgBG,EAAWF,mBAAoBQ,EAAWD,SAAS,GAC1F0D,MAAS/D,EAAWH,cAAgBG,EAAWF,mBAC/CkE,SAAU3C,GACV4C,UAAQ,UAGpB,SAACsB,EAAA,EAAD,CAAaxD,GAAI,CAACE,GAAG,EAAGC,GAAG,GAA3B,UACI,UAACsD,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,EAAhC,WACI,SAACC,EAAA,EAAD,CAAQd,KAAK,SAASvB,QAAQ,YAA9B,sBACA,SAAC,KAAD,CAAMsC,GAAG,SAASC,IAAK,SAAAC,GAAK,OAAIrF,EAAgBqF,IAAhD,UAAwD,SAACH,EAAA,EAAD,CAAQrC,QAAQ,OAAhB,gCApKpFV,IAAAA,SAAAA,iBAAiC","sources":["Component/Public/Signup/Signup.js"],"sourcesContent":["import * as React from 'react';\nimport {Stack, Card, CardActions, CardContent, Button, Typography, Box, FormControl, FormHelperText, Grid, IconButton, Input, InputAdornment, InputLabel, TextField } from '@mui/material';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport validator from 'validator';\nimport axios from 'axios';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider'\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateAdapter from '@mui/lab/AdapterMoment';\nimport moment from 'moment/moment';\nimport Visibility from '@mui/icons-material/Visibility'\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\naxios.defaults.withCredentials = true\n\nexport default function Signup(props){\n    const [validation, setValidation] = new React.useState({\n        isUserName:false,\n        isDob:false,\n        isEmail:false,\n        isStrongPassword:false,\n        isAttempted:false,\n        isConfirmPassMatch: false,\n        isEmailExist:false\n    });\n    const [helperText, setHelperText] = new React.useState({\n        username:\"Must have min 3 character.\",\n        email:\"example@email.com\",\n        password:\"Min 1 special, upper & lower case & 8 char's.\",\n        confPass:\"Entered password do not match.\",\n    });\n    const [loginElement,setLoginElement] = new React.useState(null);\n    const [dob, setDob] = new React.useState(moment(new Date().setFullYear(new Date().getFullYear()-18)));\n    const [pass, setPass] = new React.useState(null);\n    const [confPass, setConfPass] = new React.useState(null);\n    const [showPassword, setShowPassword] = new React.useState(false)\n    const validateCred=(ev)=>{\n        const validations = {...validation}\n        switch (ev.target.name) {\n            case 'username': validations['isUserName'] = validator.isLength(ev.target.value,{min:3})\n                break;\n            case 'dob': validations['isDob'] = ev.target.value ? true:false;\n                break;\n            case 'email': validations['isEmail'] = validator.isEmail(ev.target.value)\n                break;\n            case 'password': {\n                    validations['isStrongPassword'] = validator.isStrongPassword(ev.target.value)\n                    validations['isConfirmPassMatch'] = validations.isStrongPassword && confPass===ev.target.value\n                    setPass(ev.target.value)\n                }\n                break;\n            case 'confirmPass': {\n                    validations['isConfirmPassMatch'] = validations.isStrongPassword && ev.target.value===pass\n                    setConfPass(ev.target.value)\n                }\n                break;\n            default:\n                break;\n        }\n        setValidation({...validations})\n    }\n    const signUp =(event)=>{\n        event.preventDefault();\n        const form = event.target\n        if(validation.isUserName && validation.isEmail && validation.isStrongPassword \n            && validation.isConfirmPassMatch && dob){ \n            const newUser = {\n                username: form.username.value,\n                dob:moment(dob),\n                email: form.email.value,\n                password: form.password.value\n            }\n            axios.post('/user/signup',newUser)\n                .then(response =>{\n                    if(response.data.isCreated){\n                        loginElement.click()\n                    } else {\n                        setHelperText({...helperText,email:response.data.msg})\n                        setValidation({...validation,isEmailExist:true,isAttempted:true})\n                    }\n                })\n        } else{\n            const validations = {...validation};\n            validations.isAttempted = true;\n            setValidation(validations);\n        }\n    }\n    const handleMouseDownPassword =(ev)=>{\n        ev.preventDefault();\n    }\n    return(\n            <Card className=\"formModel\" sx={{ '& .MuiTextField-root': {align: 'left' ,mx:1, mb:1.5, minWidth: 360} }}>\n                <Box component=\"form\" autoComplete=\"off\" onSubmit={signUp}>\n                    <CardContent>\n                        {/* <Typography sx={{mx:1, mt:1, mb:0}} gutterBottom variant='h5' component=\"div\">Welcome back</Typography> */}\n                        <Typography sx={{mx:1, mb:2}} gutterBottom variant='h5' component=\"div\">Create new account</Typography>\n                        <Grid container sx={{ '& .MuiTextField-root': { minWidth: 100}} }>\n                        <Grid item xs={6}>\n                            <TextField \n                                id=\"username\" \n                                name=\"username\" \n                                size=\"small\" \n                                label=\"User Name\" \n                                variant=\"standard\"\n                                helperText={helperText.username}\n                                error={validation.isAttempted && !validation.isUserName}\n                                onChange={validateCred} required/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <LocalizationProvider dateAdapter={DateAdapter}>\n                                <DatePicker\n                                    id=\"dob\" \n                                    name=\"dob\" \n                                    label=\"Date of birth\" \n                                    value={dob}\n                                    maxDate={moment(new Date().setFullYear(new Date().getFullYear()-18))}\n                                    onChange={ (value)=>{setDob(value)}}\n                                    renderInput={(params) => \n                                        <TextField size=\"small\" variant=\"standard\" {...params}/>} \n                                        required/>\n                            </LocalizationProvider>\n                        </Grid>\n                        </Grid>\n                        <div>\n                            <TextField \n                                id=\"email\" \n                                name=\"email\" \n                                size=\"small\" \n                                label=\"Email\" \n                                variant=\"standard\"\n                                helperText= {helperText.email}\n                                error={validation.isAttempted && (!validation.isEmail || validation.isEmailExist)}\n                                onChange={validateCred} required/>\n                        </div>\n                        <FormControl sx={{mx:1,mb:1.5, minWidth: 360}} variant='standard'>\n                            <InputLabel htmlFor='password' \n                                error= {validation.isAttempted && !validation.isStrongPassword}>Password</InputLabel>\n                            <Input \n                                type={showPassword ? 'text':'password'}\n                                id=\"password\" \n                                name=\"password\" \n                                label=\"Password\" \n                                variant=\"standard\"\n                                error= {validation.isAttempted && !validation.isStrongPassword}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      <IconButton\n                                        aria-label=\"toggle password visibility\"\n                                        onClick={()=>setShowPassword(!showPassword)}\n                                        onMouseDown={handleMouseDownPassword}\n                                      >\n                                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                                      </IconButton>\n                                    </InputAdornment>\n                                  }\n                                onChange={validateCred} \n                                required/>\n                                <FormHelperText \n                                error= {validation.isAttempted && !validation.isStrongPassword}>{helperText.password}</FormHelperText>\n                        </FormControl>\n                        <div>\n                            <TextField \n                                type=\"password\"\n                                id=\"confirmPass\" \n                                name=\"confirmPass\" \n                                label=\"Confirm Password\" \n                                size=\"small\" \n                                variant=\"standard\"\n                                helperText={validation.isAttempted && !validation.isConfirmPassMatch? helperText.confPass:\"\"}\n                                error= { validation.isAttempted && !validation.isConfirmPassMatch }\n                                onChange={validateCred} \n                                required/>\n                        </div>\n                    </CardContent>\n                    <CardActions sx={{mx:2, mb:2 }}>\n                        <Stack direction=\"row\" spacing={2}>\n                            <Button type='submit' variant=\"contained\">Sign up</Button>\n                            <Link to='/login' ref={input => setLoginElement(input)}><Button variant=\"text\">Log In</Button></Link>  \n                        </Stack>\n                    </CardActions>\n                </Box>\n            </Card>\n    )\n}"],"names":["Signup","props","React","isUserName","isDob","isEmail","isStrongPassword","isAttempted","isConfirmPassMatch","isEmailExist","validation","setValidation","username","email","password","confPass","helperText","setHelperText","loginElement","setLoginElement","moment","Date","setFullYear","getFullYear","dob","setDob","pass","setPass","setConfPass","showPassword","setShowPassword","validateCred","ev","validations","target","name","validator","value","min","Card","className","sx","align","mx","mb","minWidth","Box","component","autoComplete","onSubmit","event","preventDefault","form","newUser","axios","then","response","data","isCreated","click","msg","CardContent","Typography","gutterBottom","variant","Grid","container","item","xs","TextField","id","size","label","error","onChange","required","LocalizationProvider","dateAdapter","DateAdapter","DatePicker","maxDate","renderInput","params","FormControl","InputLabel","htmlFor","Input","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","VisibilityOff","Visibility","FormHelperText","CardActions","Stack","direction","spacing","Button","to","ref","input"],"sourceRoot":""}