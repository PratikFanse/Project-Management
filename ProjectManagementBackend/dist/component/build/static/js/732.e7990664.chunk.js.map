{"version":3,"file":"static/js/732.e7990664.chunk.js","mappings":"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","sources":["Component/Public/ForgotPassword/ForgotPassword.js"],"sourcesContent":["import { Button, Card, CardActions, CardContent, CircularProgress, FormHelperText, Stack, TextField, Typography } from \"@mui/material\";\nimport { green } from \"@mui/material/colors\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport validator from \"validator\";\n\nexport default function ForgotPassword(props){\n    const [validation, setValidation] = new React.useState({\n        isEmail:false,\n        isAttempted:false,\n        isEmailExist: true,\n    })\n    const [userToken,setUserToken] = new React.useState({\n        email:'',\n        token:''\n    })\n    const [loading, setLoading] = React.useState(false);\n    const [success, setSuccess] = React.useState(false);\n    const [resetElement, setResetElement] = React.useState();\n    const buttonSx = {\n        ...(success && {\n          bgcolor: green[500],\n          '&:hover': {\n            bgcolor: green[700],\n          },\n        }),\n      };\n    const validateEmail=(ev)=>{\n        setValidation({...validation, isEmail:validator.isEmail(ev.target.value)})\n    }\n    const sendOTP =(event)=>{\n        event.preventDefault();\n        if(validation.isEmail && !loading){\n                setSuccess(false);\n                setLoading(true);\n            const form = event.target \n            axios.post('/user/forgotPassword',{email:form.email.value})\n                .then(response =>{\n                    setSuccess(true);\n                    setLoading(false);\n                    props.notification()\n                    setUserToken({email:form.email.value,token: response.data})\n                    // navigate('/login')\n                    resetElement.click()\n                }).catch( (err)=>{\n                    setLoading(false);\n                    setValidation({...validation, isEmailExist:false} );\n                })\n        } else{\n            setValidation({...validation, isAttempted:true});\n        }\n    }\n    return(\n        <Card className=\"formModel\" sx={{ '& .MuiTextField-root': {align: 'left' ,mx:1, mb:1.5, minWidth: 360} }}>\n            <Box component=\"form\" autoComplete=\"off\" onSubmit={sendOTP}>\n                <CardContent>\n                    {/* <Typography sx={{mx:1, mt:1, mb:0}} gutterBottom variant='h5' component=\"div\">Welcome back</Typography> */}\n                    <Typography sx={{mx:1,mb:1}} gutterBottom variant='h5' component=\"div\">Forgot password</Typography>\n                    <Typography sx={{mx:1,mb:2}} variant=\"body2\" gutterBottom component=\"div\">\n                        Enter any email you've used before and we'll send you OTP to reset password.\n                    </Typography>\n                    <div>\n                        <TextField \n                            id=\"email\" \n                            name=\"email\" \n                            size=\"small\" \n                            label=\"Email\" \n                            variant=\"standard\"\n                            helperText=\"example@email.com\"\n                            error={validation.isAttempted && !validation.isEmail}\n                            onChange={validateEmail} />\n                    </div>\n                </CardContent>\n                {\n                    validation.isEmailExist? \n                    '':<FormHelperText sx={{mx:3}} error= {true}>\n                        We couldn't find an account with this email address.\n                        </FormHelperText>\n                }\n                <Typography sx={{mx:3}} variant=\"body2\" gutterBottom component=\"div\">\n                        <b>Note:</b> Once OTP is sent do not refresh the page.\n                    </Typography>\n                <CardActions sx={{mx:2,mb:2}}>\n                    <Stack direction=\"row\" spacing={2}>\n                        <Button type='submit' \n                            sx={buttonSx}\n                            disabled={loading} \n                            variant=\"contained\">\n                                Send OTP\n                        </Button>\n                        {loading && (\n                          <CircularProgress\n                            size={24}\n                            className=\"buttonLoader\"\n                            sx={{\n                              color: green[500],\n                              position: 'absolute'\n                            }}\n                          />\n                        )} \n                        <Link to='/login'><Button variant=\"text\">Back to Login In</Button></Link>  \n                        <Link to='/resetPassword' style={{display:'none'}} state={userToken} ref={input => setResetElement(input)}><Button variant=\"text\">Back to Login In</Button></Link>\n                    </Stack>\n                </CardActions>\n            </Box>\n        </Card>\n    )\n}"],"names":["ForgotPassword","props","React","isEmail","isAttempted","isEmailExist","validation","setValidation","email","token","userToken","setUserToken","loading","setLoading","success","setSuccess","resetElement","setResetElement","buttonSx","bgcolor","green","className","sx","align","mx","mb","minWidth","component","autoComplete","onSubmit","event","preventDefault","form","target","axios","value","then","response","notification","data","click","catch","err","gutterBottom","variant","id","name","size","label","helperText","error","onChange","ev","validator","direction","spacing","type","disabled","color","position","to","style","display","state","ref","input"],"sourceRoot":""}